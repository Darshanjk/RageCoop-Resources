<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RageCoop.Client</name>
    </assembly>
    <members>
        <member name="T:RageCoop.Client.Main">
            <summary>
                Don't use it!
            </summary>
        </member>
        <member name="M:RageCoop.Client.Main.#ctor">
            <summary>
                Don't use it!
            </summary>
        </member>
        <member name="M:RageCoop.Client.Main.QueueToMainThreadAndWait(System.Action)">
            <summary>
                Queue an action to main thread and wait for execution to complete, must be called from script thread.
            </summary>
            <param name="task"></param>
        </member>
        <member name="T:RageCoop.Client.Menus.CoopMenu">
            <summary>
                Don't use it!
            </summary>
        </member>
        <member name="M:RageCoop.Client.Menus.CoopMenu.#cctor">
            <summary>
                Don't use it!
            </summary>
        </member>
        <member name="T:RageCoop.Client.Menus.ServersMenu">
            <summary>
                Don't use it!
            </summary>
        </member>
        <member name="M:RageCoop.Client.Menus.ServersMenu.#cctor">
            <summary>
                Don't use it!
            </summary>
        </member>
        <member name="M:RageCoop.Client.DownloadManager.FileAlreadyExists(System.String,System.String,System.Int64)">
            <summary>
                Check if the file already exists and if the size correct otherwise delete this file
            </summary>
            <param name="folder"></param>
            <param name="name"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="F:RageCoop.Client.Networking._resolveHandle">
            <summary>
                Used to reslove entity handle in a <see cref="T:RageCoop.Core.Packets.CustomEvent" />
            </summary>
        </member>
        <member name="T:RageCoop.Client.Networking.ReceivedPackets">
            <summary>
                Reduce GC pressure by reusing frequently used packets
            </summary>
        </member>
        <member name="T:RageCoop.Client.Networking.SendPackets">
            <summary>
                Reduce GC pressure by reusing frequently used packets
            </summary>
        </member>
        <member name="P:RageCoop.Client.Player.ID">
            <summary>
                Universal ped ID.
            </summary>
        </member>
        <member name="P:RageCoop.Client.Player.Ping">
            <summary>
                Player round-trip time in seconds, will be the rtt to server if not using P2P connection.
            </summary>
        </member>
        <member name="T:RageCoop.Client.Scripting.CustomEventReceivedArgs">
            <summary>
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.CustomEventReceivedArgs.Hash">
            <summary>
                The event hash
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.CustomEventReceivedArgs.Args">
            <summary>
                Supported types: byte, short, ushort, int, uint, long, ulong, float, bool, string, Vector3, Quaternion
            </summary>
        </member>
        <member name="T:RageCoop.Client.Scripting.API">
            <summary>
                Provides vital functionality to interact with RAGECOOP
            </summary>
        </member>
        <member name="T:RageCoop.Client.Scripting.API.Config">
            <summary>
                Client configuration, this will conflict with server-side config.
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.API.Config.Username">
            <summary>
                Get or set local player's username, set won't be effective if already connected to a server.
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.API.Config.EnableAutoRespawn">
            <summary>
                Enable automatic respawn for this player.
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.API.Config.BlipColor">
            <summary>
                Get or set player's blip color
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.API.Config.BlipSprite">
            <summary>
                Get or set player's blip sprite
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.API.Config.BlipScale">
            <summary>
                Get or set scale of player's blip
            </summary>
        </member>
        <member name="T:RageCoop.Client.Scripting.API.Events">
            <summary>
                Base events for RageCoop
            </summary>
        </member>
        <member name="E:RageCoop.Client.Scripting.API.Events.OnPlayerDied">
            <summary>
                The local player is dead
            </summary>
        </member>
        <member name="E:RageCoop.Client.Scripting.API.Events.OnVehicleSpawned">
            <summary>
                A local vehicle is spawned
            </summary>
        </member>
        <member name="E:RageCoop.Client.Scripting.API.Events.OnVehicleDeleted">
            <summary>
                A local vehicle is deleted
            </summary>
        </member>
        <member name="E:RageCoop.Client.Scripting.API.Events.OnPedSpawned">
            <summary>
                A local ped is spawned
            </summary>
        </member>
        <member name="E:RageCoop.Client.Scripting.API.Events.OnPedDeleted">
            <summary>
                A local ped is deleted
            </summary>
        </member>
        <member name="T:RageCoop.Client.Scripting.API.Events.EmptyEvent">
            <summary>
            </summary>
        </member>
        <member name="T:RageCoop.Client.Scripting.API.Events.CustomEvent">
            <summary>
            </summary>
            <param name="hash"></param>
            <param name="args"></param>
        </member>
        <member name="P:RageCoop.Client.Scripting.API.LocalPlayerID">
            <summary>
                Get the local player's ID
            </summary>
            <returns>PlayerID</returns>
        </member>
        <member name="P:RageCoop.Client.Scripting.API.IsOnServer">
            <summary>
                Check if player is connected to a server
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.API.ServerEndPoint">
            <summary>
                Get an <see cref="T:System.Net.IPEndPoint" /> that the player is currently connected to, or null if not connected to
                the server
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.API.IsMenuVisible">
            <summary>
                Check if a RAGECOOP menu is visible
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.API.IsChatFocused">
            <summary>
                Check if the RAGECOOP chat is visible
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.API.IsPlayerListVisible">
            <summary>
                Check if the RAGECOOP list of players is visible
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.API.CurrentVersion">
            <summary>
                Get the version of RAGECOOP
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.API.Logger">
            <summary>
                Get a <see cref="T:RageCoop.Core.Logger" /> that RAGECOOP is currently using.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RageCoop.Client.Scripting.API.Players">
            <summary>
                Get all players indexed by their ID
            </summary>
        </member>
        <member name="M:RageCoop.Client.Scripting.API.QueueAction(System.Action)">
            <summary>
                Queue an action to be executed on next tick.
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:RageCoop.Client.Scripting.API.QueueAction(System.Func{System.Boolean})">
            <summary>
                Queue an action to be executed on next tick, allowing you to call scripting API from another thread.
            </summary>
            <param name="a">
                An <see cref="T:System.Func`2" /> to be executed with a return value indicating whether it can be
                removed after execution.
            </param>
        </member>
        <member name="M:RageCoop.Client.Scripting.API.Connect(System.String)">
            <summary>
                Connect to a server
            </summary>
            <param name="address">Address of the server, e.g. 127.0.0.1:4499</param>
            <exception cref="T:System.InvalidOperationException">When a connection is active or being established</exception>
        </member>
        <member name="M:RageCoop.Client.Scripting.API.Disconnect">
            <summary>
                Disconnect from current server or cancel the connection attempt.
            </summary>
        </member>
        <member name="M:RageCoop.Client.Scripting.API.ListServers">
            <summary>
                List all servers from master server address
            </summary>
            <returns></returns>
        </member>
        <member name="M:RageCoop.Client.Scripting.API.LocalChatMessage(System.String,System.String)">
            <summary>
                Send a local chat message to this player
            </summary>
            <param name="from">Name of the sender</param>
            <param name="message">The player's message</param>
        </member>
        <member name="M:RageCoop.Client.Scripting.API.SendChatMessage(System.String)">
            <summary>
                Send a chat message or command to server/other players
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RageCoop.Client.Scripting.API.SendCustomEvent(RageCoop.Core.Scripting.CustomEventHash,System.Object[])">
            <summary>
                Send an event and data to the server.
            </summary>
            <param name="eventHash">An unique identifier of the event</param>
            <param name="args">
                The objects conataing your data, see <see cref="T:RageCoop.Client.Scripting.CustomEventReceivedArgs" /> for a list of supported
                types
            </param>
        </member>
        <member name="M:RageCoop.Client.Scripting.API.SendCustomEvent(RageCoop.Core.Scripting.CustomEventFlags,RageCoop.Core.Scripting.CustomEventHash,System.Object[])">
            <summary>
                Send an event and data to the server
            </summary>
            <param name="flags"></param>
            <param name="eventHash">An unique identifier of the event</param>
            <param name="args">
                The objects conataing your data, see <see cref="T:RageCoop.Client.Scripting.CustomEventReceivedArgs" /> for a list of supported
                types
            </param>
        </member>
        <member name="M:RageCoop.Client.Scripting.API.RegisterCustomEventHandler(RageCoop.Core.Scripting.CustomEventHash,System.Action{RageCoop.Client.Scripting.CustomEventReceivedArgs})">
            <summary>
                Register an handler to the specifed event hash, one event can have multiple handlers. This will be invoked from
                backgound thread, use <see cref="M:RageCoop.Client.Scripting.API.QueueAction(System.Action)" /> in the handler to dispatch code to script thread.
            </summary>
            <param name="hash">
                An unique identifier of the event, you can hash your event name with
                <see cref="M:RageCoop.Core.Scripting.CustomEvents.Hash(System.String)" />
            </param>
            <param name="handler">An handler to be invoked when the event is received from the server. </param>
        </member>
        <member name="M:RageCoop.Client.Scripting.API.RequestSharedFile(System.String,System.Action{System.String})">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:RageCoop.Client.Scripting.ClientScript">
            <summary>
                Inherit from this class, constructor will be called automatically, but other scripts might have yet been loaded,
                you should use <see cref="M:RageCoop.Client.Scripting.ClientScript.OnStart" />. to initiate your script.
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.ClientScript.CurrentFile">
            <summary>
                Get the <see cref="T:RageCoop.Core.Scripting.ResourceFile" /> instance where this script is loaded from.
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.ClientScript.CurrentResource">
            <summary>
                Get the <see cref="T:RageCoop.Client.Scripting.ClientResource" /> that this script belongs to.
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.ClientScript.Logger">
            <summary>
                Eqivalent of <see cref="P:RageCoop.Client.Scripting.ClientResource.Logger" /> in <see cref="P:RageCoop.Client.Scripting.ClientScript.CurrentResource" />
            </summary>
        </member>
        <member name="M:RageCoop.Client.Scripting.ClientScript.OnStart">
            <summary>
                This method would be called from main thread, right after all script constructors are invoked.
            </summary>
        </member>
        <member name="M:RageCoop.Client.Scripting.ClientScript.OnStop">
            <summary>
                This method would be called from main thread right before the whole <see cref="T:System.AppDomain" /> is unloded but
                prior to <see cref="E:GTA.Script.Aborted" />.
            </summary>
        </member>
        <member name="T:RageCoop.Client.Scripting.ClientResource">
            <summary>
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.ClientResource.Name">
            <summary>
                Name of the resource
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.ClientResource.ScriptsDirectory">
            <summary>
                Directory where the scripts is loaded from
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.ClientResource.DataFolder">
            <summary>
                A resource-specific folder that can be used to store your files.
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.ClientResource.Scripts">
            <summary>
                Get all <see cref="T:RageCoop.Client.Scripting.ClientScript" /> instance in this resource.
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.ClientResource.Files">
            <summary>
                Get the <see cref="T:RageCoop.Core.Scripting.ResourceFile" /> where this script is loaded from.
            </summary>
        </member>
        <member name="P:RageCoop.Client.Scripting.ClientResource.Logger">
            <summary>
                A <see cref="T:RageCoop.Core.Logger" /> instance that can be used to debug your resource.
            </summary>
        </member>
        <member name="T:RageCoop.Client.Settings">
            <summary>
                Don't use it!
            </summary>
        </member>
        <member name="F:RageCoop.Client.Settings.LogLevel">
            <summary>
                LogLevel for RageCoop.
                0:Trace, 1:Debug, 2:Info, 3:Warning, 4:Error
            </summary>
        </member>
        <member name="P:RageCoop.Client.Settings.Username">
            <summary>
                Don't use it!
            </summary>
        </member>
        <member name="P:RageCoop.Client.Settings.Password">
            <summary>
                The password used to authenticate when connecting to a server.
            </summary>
        </member>
        <member name="P:RageCoop.Client.Settings.LastServerAddress">
            <summary>
                Don't use it!
            </summary>
        </member>
        <member name="P:RageCoop.Client.Settings.MasterServer">
            <summary>
                Don't use it!
            </summary>
        </member>
        <member name="P:RageCoop.Client.Settings.FlipMenu">
            <summary>
                Don't use it!
            </summary>
        </member>
        <member name="P:RageCoop.Client.Settings.Voice">
            <summary>
                Don't use it!
            </summary>
        </member>
        <member name="P:RageCoop.Client.Settings.MenuKey">
            <summary>
                The key to open menu
            </summary>
        </member>
        <member name="P:RageCoop.Client.Settings.PassengerKey">
            <summary>
                The key to enter a vehicle as passenger.
            </summary>
        </member>
        <member name="P:RageCoop.Client.Settings.DisableTraffic">
            <summary>
                Disable world NPC traffic, mission entities won't be affected
            </summary>
        </member>
        <member name="P:RageCoop.Client.Settings.DisableAlternatePause">
            <summary>
                Bring up pause menu but don't freeze time when FrontEndPauseAlternate(Esc) is pressed.
            </summary>
        </member>
        <member name="P:RageCoop.Client.Settings.WorldVehicleSoftLimit">
            <summary>
                The game won't spawn more NPC traffic if the limit is exceeded. -1 for unlimited (not recommended).
            </summary>
        </member>
        <member name="P:RageCoop.Client.Settings.WorldPedSoftLimit">
            <summary>
                The game won't spawn more NPC traffic if the limit is exceeded. -1 for unlimited (not recommended).
            </summary>
        </member>
        <member name="P:RageCoop.Client.Settings.ShowEntityOwnerName">
            <summary>
                Show the owner name of the entity you're aiming at
            </summary>
        </member>
        <member name="T:RageCoop.Client.SyncedPed">
            <summary>
                ?
            </summary>
            <summary>
                ?
            </summary>
        </member>
        <member name="M:RageCoop.Client.SyncedPed.#ctor(GTA.Ped)">
            <summary>
                Create a local entity (outgoing sync)
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:RageCoop.Client.SyncedPed.#ctor(System.Int32)">
            <summary>
                Create an empty character with ID
            </summary>
        </member>
        <member name="T:RageCoop.Client.SyncedEntity">
            <summary>
            </summary>
        </member>
        <member name="F:RageCoop.Client.SyncedEntity._lastFrozen">
            <summary>
            </summary>
        </member>
        <member name="P:RageCoop.Client.SyncedEntity.IsLocal">
            <summary>
                Indicates whether the current player is responsible for syncing this entity.
            </summary>
        </member>
        <member name="P:RageCoop.Client.SyncedEntity.ID">
            <summary>
                Network ID for this entity
            </summary>
        </member>
        <member name="P:RageCoop.Client.SyncedEntity.OwnerID">
            <summary>
            </summary>
        </member>
        <member name="P:RageCoop.Client.SyncedEntity.IsOutOfSync">
            <summary>
            </summary>
        </member>
        <member name="P:RageCoop.Client.SyncedEntity.LastSynced">
            <summary>
                Last time a new sync message arrived.
            </summary>
        </member>
        <member name="P:RageCoop.Client.SyncedEntity.LastFullSynced">
            <summary>
                Last time a new sync message arrived.
            </summary>
        </member>
        <member name="P:RageCoop.Client.SyncedEntity.LastUpdated">
            <summary>
                Last time the local entity has been updated,
            </summary>
        </member>
        <member name="P:RageCoop.Client.SyncedProjectile.OwnerID">
            <summary>
                Invalid property for projectile.
            </summary>
        </member>
        <member name="T:RageCoop.Client.SyncedProp">
            <summary>
                Synchronized prop, mostly owned by server
            </summary>
        </member>
        <member name="P:RageCoop.Client.SyncedProp.MainProp">
            <summary>
                The real entity
            </summary>
        </member>
        <member name="T:RageCoop.Client.SyncedVehicle">
            <summary>
                A synchronized vehicle instance
            </summary>
        </member>
        <member name="M:RageCoop.Client.SyncedVehicle.Update">
            <summary>
                VehicleSeat,ID
            </summary>
        </member>
        <member name="M:RageCoop.Client.SyncedVehicle.#ctor(GTA.Vehicle)">
            <summary>
                Create a local entity (outgoing sync)
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:RageCoop.Client.SyncedVehicle.#ctor">
            <summary>
                Create an empty VehicleEntity
            </summary>
        </member>
        <member name="M:RageCoop.Client.NativeCaller.ConvertPrimitiveArguments(System.Object[])">
            <summary>
                Helper function that converts an array of primitive values to a native stack.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:RageCoop.Client.Util.CursorPositionRelative">
            <summary>
                The location of the cursor on screen between 0 and 1.
            </summary>
        </member>
        <member name="T:RageCoop.Client.Win32.HookType">
            <summary>
                Enumerates the valid hook types passed as the idHook parameter into a call to SetWindowsHookEx.
            </summary>
        </member>
        <member name="F:RageCoop.Client.Win32.HookType.WH_MSGFILTER">
            <summary>
                Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box,
                message box, menu, or scroll bar. For more information, see the MessageProc hook procedure.
            </summary>
        </member>
        <member name="F:RageCoop.Client.Win32.HookType.WH_JOURNALRECORD">
            <summary>
                Installs a hook procedure that records input messages posted to the system message queue. This hook is
                useful for recording macros. For more information, see the JournalRecordProc hook procedure.
            </summary>
        </member>
        <member name="F:RageCoop.Client.Win32.HookType.WH_JOURNALPLAYBACK">
            <summary>
                Installs a hook procedure that posts messages previously recorded by a WH_JOURNALRECORD hook procedure.
                For more information, see the JournalPlaybackProc hook procedure.
            </summary>
        </member>
        <member name="F:RageCoop.Client.Win32.HookType.WH_KEYBOARD">
            <summary>
                Installs a hook procedure that monitors keystroke messages. For more information, see the KeyboardProc
                hook procedure.
            </summary>
        </member>
        <member name="F:RageCoop.Client.Win32.HookType.WH_GETMESSAGE">
            <summary>
                Installs a hook procedure that monitors messages posted to a message queue. For more information, see the
                GetMsgProc hook procedure.
            </summary>
        </member>
        <member name="F:RageCoop.Client.Win32.HookType.WH_CALLWNDPROC">
            <summary>
                Installs a hook procedure that monitors messages before the system sends them to the destination window
                procedure. For more information, see the CallWndProc hook procedure.
            </summary>
        </member>
        <member name="F:RageCoop.Client.Win32.HookType.WH_CBT">
            <summary>
                Installs a hook procedure that receives notifications useful to a CBT application. For more information,
                see the CBTProc hook procedure.
            </summary>
        </member>
        <member name="F:RageCoop.Client.Win32.HookType.WH_SYSMSGFILTER">
            <summary>
                Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box,
                message box, menu, or scroll bar. The hook procedure monitors these messages for all applications in the
                same desktop as the calling thread. For more information, see the SysMsgProc hook procedure.
            </summary>
        </member>
        <member name="F:RageCoop.Client.Win32.HookType.WH_MOUSE">
            <summary>
                Installs a hook procedure that monitors mouse messages. For more information, see the MouseProc hook
                procedure.
            </summary>
        </member>
        <member name="F:RageCoop.Client.Win32.HookType.WH_HARDWARE">
            <summary>
            </summary>
        </member>
        <member name="F:RageCoop.Client.Win32.HookType.WH_DEBUG">
            <summary>
                Installs a hook procedure useful for debugging other hook procedures. For more information, see the
                DebugProc hook procedure.
            </summary>
        </member>
        <member name="F:RageCoop.Client.Win32.HookType.WH_SHELL">
            <summary>
                Installs a hook procedure that receives notifications useful to shell applications. For more information,
                see the ShellProc hook procedure.
            </summary>
        </member>
        <member name="F:RageCoop.Client.Win32.HookType.WH_FOREGROUNDIDLE">
            <summary>
                Installs a hook procedure that will be called when the application's foreground thread is about to become
                idle. This hook is useful for performing low priority tasks during idle time. For more information, see the
                ForegroundIdleProc hook procedure.
            </summary>
        </member>
        <member name="F:RageCoop.Client.Win32.HookType.WH_CALLWNDPROCRET">
            <summary>
                Installs a hook procedure that monitors messages after they have been processed by the destination window
                procedure. For more information, see the CallWndRetProc hook procedure.
            </summary>
        </member>
        <member name="F:RageCoop.Client.Win32.HookType.WH_KEYBOARD_LL">
            <summary>
                Installs a hook procedure that monitors low-level keyboard input events. For more information, see the
                LowLevelKeyboardProc hook procedure.
            </summary>
        </member>
        <member name="F:RageCoop.Client.Win32.HookType.WH_MOUSE_LL">
            <summary>
                Installs a hook procedure that monitors low-level mouse input events. For more information, see the
                LowLevelMouseProc hook procedure.
            </summary>
        </member>
        <member name="T:RageCoop.Client.WorldThread">
            <summary>
                Don't use it!
            </summary>
        </member>
        <member name="M:RageCoop.Client.WorldThread.#ctor">
            <summary>
                Don't use it!
            </summary>
        </member>
        <member name="M:RageCoop.Client.WorldThread.QueueAction(System.Func{System.Boolean})">
            <summary>
                Queue an action to be executed on next tick, allowing you to call scripting API from another thread.
            </summary>
            <param name="a">
                An action to be executed with a return value indicating whether the action can be removed after
                execution.
            </param>
        </member>
        <member name="M:RageCoop.Client.WorldThread.ClearQueuedActions">
            <summary>
                Clears all queued actions
            </summary>
        </member>
    </members>
</doc>
